"""
Text File Generator Module

This module handles the creation of text output files from OCR results,
maintaining proper formatting and optionally including metadata.
"""

from datetime import datetime
from pathlib import Path
from typing import Dict


class TextGenerator:
    """Generates formatted text files from OCR results."""

    def __init__(self, include_metadata: bool = True):
        """
        Initialize the text generator.

        Args:
            include_metadata: Include processing metadata in output files
        """
        self.include_metadata = include_metadata

    def generate_text_file(self, ocr_result: Dict[str, any], output_path: str) -> bool:
        """
        Generate a text file from OCR results.

        Args:
            ocr_result: Dictionary containing OCR results
            output_path: Path where text file should be created

        Returns:
            True if successful, False otherwise
        """
        try:
            output_path = Path(output_path)

            # Build content
            content_parts = []

            # Add metadata header if enabled
            if self.include_metadata:
                content_parts.append(self._generate_metadata_header(ocr_result))

            # Add extracted text for each page
            for page_result in ocr_result.get('pages', []):
                page_num = page_result.get('page_number', 0)
                text = page_result.get('text', '')

                # Add page marker
                content_parts.append(f"\n{'='*10} PAGE {page_num} {'='*10}\n")

                # Add text
                content_parts.append(text)

            # Add footer if metadata enabled
            if self.include_metadata:
                content_parts.append(self._generate_footer(ocr_result))

            # Combine all parts
            final_content = "\n".join(content_parts)

            # Write to file
            output_path.parent.mkdir(parents=True, exist_ok=True)
            output_path.write_text(final_content, encoding='utf-8')

            return True

        except Exception as e:
            print(f"ERROR: Failed to generate text file: {e}")
            return False

    def _generate_metadata_header(self, ocr_result: Dict[str, any]) -> str:
        """
        Generate metadata header for text file.

        Args:
            ocr_result: OCR processing results

        Returns:
            Formatted metadata header
        """
        pdf_path = Path(ocr_result.get('pdf_path', ''))
        total_pages = ocr_result.get('total_pages', 0)
        avg_confidence = ocr_result.get('avg_confidence', 0.0)
        total_time = ocr_result.get('total_time', 0.0)
        pages_with_retry = ocr_result.get('pages_with_retry', 0)

        header = f"""{'='*60}
Document: {pdf_path.name}
Source Path: {pdf_path}
Processed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Pages: {total_pages}
Average Confidence: {avg_confidence:.2%}
Processing Time: {total_time:.1f} seconds
Pages with Retry: {pages_with_retry}
Model: Qwen3-VL-30B-A3B-Thinking-FP8
{'='*60}
"""
        return header

    def _generate_footer(self, ocr_result: Dict[str, any]) -> str:
        """
        Generate footer for text file.

        Args:
            ocr_result: OCR processing results

        Returns:
            Formatted footer
        """
        total_attempts = ocr_result.get('total_attempts', 0)
        total_time = ocr_result.get('total_time', 0.0)

        footer = f"""
{'='*60}
Processing Complete
Total Attempts: {total_attempts}
Total Time: {total_time:.1f} seconds

Generated by Qwen3-VL OCR CLI
Model: Qwen3-VL-30B-A3B-Thinking-FP8
Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
{'='*60}
"""
        return footer

    def generate_simple_text_file(self, text: str, output_path: str) -> bool:
        """
        Generate a simple text file without metadata.

        Args:
            text: Text content to write
            output_path: Path where text file should be created

        Returns:
            True if successful, False otherwise
        """
        try:
            output_path = Path(output_path)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            output_path.write_text(text, encoding='utf-8')
            return True

        except Exception as e:
            print(f"ERROR: Failed to write text file: {e}")
            return False


def create_text_file(ocr_result: Dict[str, any], output_path: str,
                    include_metadata: bool = True) -> bool:
    """
    Convenience function to create a text file from OCR results.

    Args:
        ocr_result: Dictionary containing OCR results
        output_path: Path where text file should be created
        include_metadata: Include processing metadata in output

    Returns:
        True if successful, False otherwise
    """
    generator = TextGenerator(include_metadata=include_metadata)
    return generator.generate_text_file(ocr_result, output_path)


if __name__ == "__main__":
    # Test text generator
    from datetime import datetime

    test_result = {
        'success': True,
        'pdf_path': '/test/document.pdf',
        'total_pages': 3,
        'total_time': 45.2,
        'avg_confidence': 0.925,
        'total_attempts': 5,
        'pages_with_retry': 2,
        'pages': [
            {
                'page_number': 1,
                'text': 'This is the first page.\nIt contains some sample text.',
                'confidence': 0.95
            },
            {
                'page_number': 2,
                'text': 'This is the second page.\nWith more content here.',
                'confidence': 0.90
            },
            {
                'page_number': 3,
                'text': 'Final page of the document.\nThe end.',
                'confidence': 0.93
            }
        ]
    }

    generator = TextGenerator(include_metadata=True)

    print("Testing text file generation...")
    success = generator.generate_text_file(test_result, '/tmp/test_output.txt')

    if success:
        print("✓ Test text file created successfully")
        print("\nContent preview:")
        print("-" * 60)
        with open('/tmp/test_output.txt', 'r') as f:
            print(f.read())
    else:
        print("✗ Failed to create test file")
