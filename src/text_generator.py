"""
Text Generator Module

Generates text files from OCR results with optional metadata.
"""

import logging
from datetime import datetime
from pathlib import Path
from typing import List, Tuple

logger = logging.getLogger(__name__)


class TextGenerator:
    """Generates formatted text files from OCR results."""

    def __init__(
        self,
        include_metadata: bool = True,
        add_page_markers: bool = True
    ):
        """
        Initialize text generator.

        Args:
            include_metadata: Include metadata header in output
            add_page_markers: Add page number markers
        """
        self.include_metadata = include_metadata
        self.add_page_markers = add_page_markers

    def generate_text_file(
        self,
        pdf_path: Path,
        page_results: List[Tuple[str, float, int]],
        model_name: str,
        processing_time: float
    ) -> bool:
        """
        Generate text file from OCR results.

        Args:
            pdf_path: Path to source PDF file
            page_results: List of (text, confidence, attempts) for each page
            model_name: Name of model used
            processing_time: Total processing time in seconds

        Returns:
            True if successful, False otherwise
        """
        try:
            # Output path: same location as PDF, .txt extension
            output_path = pdf_path.with_suffix('.txt')

            # Calculate statistics
            total_pages = len(page_results)
            avg_confidence = sum(conf for _, conf, _ in page_results) / max(total_pages, 1)
            retry_pages = sum(1 for _, _, attempts in page_results if attempts > 1)

            # Build output content
            content_parts = []

            # Add metadata header
            if self.include_metadata:
                header = self._generate_header(
                    pdf_path=pdf_path,
                    total_pages=total_pages,
                    avg_confidence=avg_confidence,
                    model_name=model_name,
                    processing_time=processing_time
                )
                content_parts.append(header)

            # Add page content
            for page_num, (text, confidence, attempts) in enumerate(page_results, start=1):
                if self.add_page_markers:
                    marker = f"\n{'=' * 10} PAGE {page_num} {'=' * 10}\n\n"
                    content_parts.append(marker)

                content_parts.append(text.strip())
                content_parts.append("\n\n")

            # Add footer
            if self.include_metadata:
                footer = self._generate_footer(
                    processing_time=processing_time,
                    retry_pages=retry_pages
                )
                content_parts.append(footer)

            # Write to file
            full_content = "".join(content_parts)

            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(full_content)

            logger.info(f"✓ Text file created: {output_path}")
            return True

        except Exception as e:
            logger.error(f"✗ Failed to create text file: {e}")
            return False

    def _generate_header(
        self,
        pdf_path: Path,
        total_pages: int,
        avg_confidence: float,
        model_name: str,
        processing_time: float
    ) -> str:
        """Generate metadata header."""
        header = []
        header.append("=" * 80)
        header.append(f"Document: {pdf_path.name}")
        header.append(f"Source Path: {pdf_path.absolute()}")
        header.append(f"Processed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        header.append(f"Pages: {total_pages}")
        header.append(f"Average Confidence: {avg_confidence * 100:.1f}%")
        header.append(f"Model: {model_name}")
        header.append("=" * 80)
        header.append("\n")

        return "\n".join(header)

    def _generate_footer(
        self,
        processing_time: float,
        retry_pages: int
    ) -> str:
        """Generate footer with processing info."""
        footer = []
        footer.append("\n")
        footer.append("-" * 80)
        footer.append("Generated by Qwen3-VL OCR CLI")
        footer.append(f"Processing Time: {processing_time:.1f} seconds")
        footer.append(f"Retries: {retry_pages} pages required retry")
        footer.append("-" * 80)

        return "\n".join(footer)


class BatchTextGenerator:
    """Generates text files for batch processing."""

    def __init__(self, text_generator: TextGenerator):
        """
        Initialize batch text generator.

        Args:
            text_generator: TextGenerator instance
        """
        self.text_generator = text_generator
        self.results = []

    def add_result(
        self,
        pdf_path: Path,
        page_results: List[Tuple[str, float, int]],
        model_name: str,
        processing_time: float
    ) -> bool:
        """
        Add a result to the batch and generate text file.

        Args:
            pdf_path: Path to PDF
            page_results: OCR results for pages
            model_name: Model name
            processing_time: Processing time

        Returns:
            True if successful
        """
        success = self.text_generator.generate_text_file(
            pdf_path=pdf_path,
            page_results=page_results,
            model_name=model_name,
            processing_time=processing_time
        )

        self.results.append({
            'pdf_path': pdf_path,
            'success': success,
            'pages': len(page_results),
            'avg_confidence': sum(c for _, c, _ in page_results) / len(page_results) if page_results else 0,
            'processing_time': processing_time
        })

        return success

    def get_summary(self) -> dict:
        """
        Get batch processing summary.

        Returns:
            Summary dictionary
        """
        total = len(self.results)
        successful = sum(1 for r in self.results if r['success'])
        failed = total - successful
        total_pages = sum(r['pages'] for r in self.results)
        avg_confidence = sum(r['avg_confidence'] for r in self.results) / max(total, 1)
        total_time = sum(r['processing_time'] for r in self.results)

        return {
            'total_pdfs': total,
            'successful': successful,
            'failed': failed,
            'total_pages': total_pages,
            'avg_confidence': avg_confidence,
            'total_time': total_time
        }


def create_text_file(
    pdf_path: Path,
    page_results: List[Tuple[str, float, int]],
    model_name: str,
    processing_time: float,
    include_metadata: bool = True
) -> bool:
    """
    Convenience function to create text file.

    Args:
        pdf_path: Path to PDF
        page_results: OCR results
        model_name: Model name
        processing_time: Processing time
        include_metadata: Include metadata

    Returns:
        True if successful
    """
    generator = TextGenerator(include_metadata=include_metadata)
    return generator.generate_text_file(
        pdf_path=pdf_path,
        page_results=page_results,
        model_name=model_name,
        processing_time=processing_time
    )


if __name__ == "__main__":
    # Test text generator
    logging.basicConfig(level=logging.INFO)

    print("Text Generator Test")
    print("=" * 80)

    # Create mock results
    mock_pdf_path = Path("test_document.pdf")
    mock_results = [
        ("This is page 1 content.\nWith multiple lines.", 0.92, 1),
        ("This is page 2 content.\nAlso with multiple lines.", 0.88, 2),
        ("This is page 3 content.\nFinal page.", 0.95, 1),
    ]

    generator = TextGenerator(include_metadata=True, add_page_markers=True)

    print("\nGenerating sample text file...")
    print(f"Input: {mock_pdf_path}")
    print(f"Pages: {len(mock_results)}")

    # Note: This would actually create a file
    # In test mode, just print what would be generated
    print("\nSample output structure:")
    print("  - Metadata header (document info, confidence, model)")
    print("  - Page 1 content with marker")
    print("  - Page 2 content with marker")
    print("  - Page 3 content with marker")
    print("  - Footer (processing time, retries)")

    print("\n✓ Text generator ready for use")
